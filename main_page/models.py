from django.db import models


class EngineType(models.Model):
    type_name = models.CharField(max_length=335, verbose_name='–í–∏–¥ –¥–≤–∏–≥–∞—Ç–µ–ª—è')

    def __str__(self):
        return self.type_name

    class Meta:
        verbose_name = "–í–∏–¥ –¥–≤–∏–≥–∞—Ç–µ–ª—è"
        verbose_name_plural = "üì• –í–∏–¥—ã –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π"


class Category(models.Model):
    category_name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    category_photo = models.ImageField(verbose_name='–§–æ—Ç–æ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', upload_to='media')

    added_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.category_name

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
        verbose_name_plural = "üîã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"


class Product(models.Model):
    name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ")
    status = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞", null=True, blank=True)
    # photo = models.ImageField(upload_to='products_photos/', verbose_name="–§–æ—Ç–æ")
    description = models.TextField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ")
    count = models.IntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", null=True, blank=True)
    # volumes = models.CharField(max_length=255, verbose_name="–û–±—ä–µ–º—ã")
    specifications = models.CharField(max_length=255, verbose_name="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    kachestvo = models.CharField(max_length=255, verbose_name="–£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞", null=True, blank=True)
    engine = models.ManyToManyField(EngineType, verbose_name="–í–∏–¥ –¥–≤–∏–≥–∞—Ç–µ–ª—è")
    advantages = models.TextField(verbose_name="–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")
    color = models.CharField(max_length=100, verbose_name="–¶–≤–µ—Ç", null=True, blank=True)
    file = models.FileField(verbose_name="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", null=True, blank=True, upload_to='media/tex')
    partner = models.ForeignKey('Partner', null=True, blank=True, on_delete=models.CASCADE, verbose_name='–ë—Ä–µ–Ω–¥')
    sae_status = models.CharField(max_length=255, verbose_name="–í—è–∑–∫–æ—Å—Ç—å", null=True, blank=True)
    line = models.CharField(max_length=255, verbose_name="–õ–∏–Ω–µ–π–∫–∞", null=True, blank=True)
    use_type = models.CharField(max_length=255, verbose_name="–û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è", null=True, blank=True)

    # price = models.FloatField(verbose_name="–¶–µ–Ω–∞", null=True, blank=True)

    category = models.ManyToManyField(Category, blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ü—Ä–æ–¥—É–∫—Ç"
        verbose_name_plural = "üõ¢ –ü—Ä–æ–¥—É–∫—Ç—ã"


class PhysChemCompositionSet(models.Model):
    product = models.ForeignKey(Product, related_name='composition_sets', on_delete=models.CASCADE)
    comp_name = models.CharField(max_length=255, name='–ù–∞–∑–≤–∞–Ω–∏–µ', null=True, blank=True)  # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –¥–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä—É
    description = models.CharField(max_length=255, verbose_name="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", null=True, blank=True)
    test_result = models.CharField(max_length=255,
                                   verbose_name="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞",
                                   null=True, blank=True)

    def __repr__(self):
        return "–§–∏–∑–∏–∫–æ-—Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤"


class ProductPhoto(models.Model):
    volume = models.CharField(max_length=255, verbose_name='–û–±—å–µ–º')
    volume_photo = models.ImageField(max_length=255, verbose_name='–§–æ—Ç–æ (202x250)px')
    volume_price = models.FloatField(verbose_name='–¶–µ–Ω–∞', null=True, blank=True)
    product = models.ForeignKey(Product, related_name='volume_photos', on_delete=models.CASCADE)

    first = models.BooleanField(default=False, verbose_name='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')

    def __repr__(self):
        return "–û–±—å–µ–º—ã –∏ –∏—Ö —Ñ–æ—Ç–æ"


class PhysChemComponent(models.Model):
    composition_set = models.ForeignKey(PhysChemCompositionSet, related_name='components', on_delete=models.CASCADE)
    name = models.CharField(max_length=255, null=True, blank=True)
    percentage = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    description = models.TextField(null=True, blank=True)


class MainPage(models.Model):
    banner = models.BooleanField(verbose_name='–ë–∞–Ω–Ω–µ—Ä –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
    contacts = models.BooleanField(verbose_name='–ë–ª–æ–∫ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏')
    category_block = models.BooleanField(verbose_name='–ë–ª–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏')
    hit_of_sell = models.BooleanField(verbose_name='–•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂')
    newsellers = models.BooleanField(verbose_name='–ù–æ–≤–∏–Ω–∫–∏')
    hot_sale = models.BooleanField(verbose_name='–ì–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏')

    class Meta:
        verbose_name = "–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"

        verbose_name_plural = "üìÉ –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"


class Banner(models.Model):
    banner_text = models.TextField(verbose_name='–¢–µ–∫—Å—Ç –∫ –±–∞–Ω–Ω–µ—Ä—É')
    banner_image = models.ImageField(verbose_name='–§–æ—Ç–æ', upload_to='media')
    banner_button = models.CharField(max_length=255, verbose_name='–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏')
    banner_button_link = models.CharField(max_length=255, verbose_name='–°—Å—ã–ª–∫–∞ –∫ –∫–Ω–æ–ø–∫–µ')

    def __str__(self):
        return self.banner_text

    class Meta:
        verbose_name = "–ë–∞–Ω–Ω–µ—Ä"
        verbose_name_plural = "üèû –ë–∞–Ω–Ω–µ—Ä—ã"


class FAQ(models.Model):
    question = models.CharField(max_length=550, verbose_name='–í–æ–ø—Ä–æ—Å')
    answer = models.TextField(verbose_name='–û—Ç–≤–µ—Ç')

    def __str__(self):
        return self.question

    class Meta:
        verbose_name = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–π –≤–æ–ø–æ—Ä—Å"
        verbose_name_plural = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø–æ—Ä—Å—ã"


class Feedback(models.Model):
    client_name = models.CharField(max_length=550, verbose_name='–ò–º—è')
    feedback_text = models.TextField(verbose_name='–¢–µ–∫—Å—Ç')
    publish_date = models.DateField(verbose_name='–ë—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')

    class Meta:
        verbose_name = "–û—Ç–∑—ã–≤"
        verbose_name_plural = "‚≠ê –û—Ç–∑—ã–≤—ã"


class ClientRequest(models.Model):
    full_name = models.CharField(max_length=550, verbose_name='–§–ò–û')
    phone_number = models.CharField(max_length=550, verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    email = models.EmailField(verbose_name='–ü–æ—á—Ç–∞')
    request_text = models.TextField(verbose_name='–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
    status = models.CharField(max_length=255,
                              choices=[
                                  ('new', '–ù–æ–≤—ã–π'),
                                  ('done', '–û–±—Ä–∞–±–æ—Ç–∞–Ω')
                              ], null=True, blank=True)

    added_date = models.DateTimeField(verbose_name='–ë—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                                      auto_now_add=True,
                                      null=True,
                                      blank=True)

    def __str__(self):
        return f"{self.email} | {self.status}"

    class Meta:
        verbose_name = "–ó–∞—è–≤–∫–∞"
        verbose_name_plural = "üÜï –ó–∞—è–≤–∫–∏"


class AboutCompany(models.Model):
    main_about = models.TextField(verbose_name='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    history = models.TextField(verbose_name='–ò—Å—Ç–æ—Ä–∏—è')
    ages = models.CharField(max_length=550, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏')
    history_photo = models.ImageField(max_length=550, verbose_name='–§–æ—Ç–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ (643px X 333px)')
    address = models.CharField(max_length=550, verbose_name='–ê–¥—Ä–µ—Å')
    added_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.address

    class Meta:
        verbose_name = "–û –ö–æ–º–ø–∞–Ω–∏–∏"
        verbose_name_plural = "‚ÑπÔ∏è –û –ö–æ–º–ø–∞–Ω–∏–∏"


class Achievement(models.Model):
    title = models.CharField(max_length=225, verbose_name='–ó–∞–≥–æ–ª–æ–≤–æ–∫')
    little_text = models.TextField(verbose_name='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    photo = models.ImageField(upload_to='media')
    about = models.ForeignKey(AboutCompany, on_delete=models.CASCADE,
                              null=True, blank=True,
                              related_name='achievements')

    added_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title


class Mission(models.Model):
    little_text = models.TextField(verbose_name='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    photo = models.ImageField(upload_to='media', verbose_name='–§–æ—Ç–æ (245—Ö245)')
    about = models.ForeignKey(AboutCompany, on_delete=models.CASCADE,
                              null=True, blank=True,
                              related_name='missions')

    added_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.little_text


class PhoneNumbers(models.Model):
    contact_number = models.CharField(max_length=12,
                                      verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    status = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')

    added_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.contact_number} | " \
               f"{'–ê–∫—Ç–∏–≤–Ω—ã–π' if self.status else '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}"

    class Meta:
        verbose_name = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        verbose_name_plural = "‚òéÔ∏è –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"


class Email(models.Model):
    email = models.CharField(max_length=120,
                             verbose_name='–ü–æ—á—Ç–∞')
    status = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')

    added_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.email} | " \
               f"{'–ê–∫—Ç–∏–≤–Ω—ã–π' if self.status else '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}"

    class Meta:
        verbose_name = "–ü–æ—á—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏"
        verbose_name_plural = "üì• –ü–æ—á—Ç—ã –¥–ª—è —Å–≤—è–∑–∏"


# –•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂
class TopSale(models.Model):
    products = models.ManyToManyField(Product, related_name='products')

    def __str__(self):
        return f"–•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂"

    class Meta:
        verbose_name = "–•–∏—Ç –ø—Ä–æ–¥–∞–∂"
        verbose_name_plural = "üì• –•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂"


# –°–∫–∏–¥–∫–∏
class TopSale1(models.Model):
    product_sale = models.ManyToManyField(Product, related_name='product_sale')

    def __str__(self):
        return f"–ì–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏"

    class Meta:
        verbose_name = "–ì–æ—Ä—è—á–∞—è —Å–∫–∏–¥–∫–∞"
        verbose_name_plural = "üì• –ì–æ—Ä—è—á–∏–µ —Å–∫–∏–¥–∫–∏"


# –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
class Currency(models.Model):
    currency_rate = models.IntegerField(verbose_name='–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')

    def __str__(self):
        return f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {self.currency_rate}"

    class Meta:
        verbose_name = "–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞"
        verbose_name_plural = "üì• –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞"


# –ü–∞—Ä—Ç–Ω–µ—Ä—ã
class Partner(models.Model):
    partner_name = models.CharField(max_length=255, verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')
    partner_logo = models.ImageField(verbose_name='–õ–æ–≥–æ—Ç–∏–ø (390x205px)', upload_to='media/partners')
    partner_city = models.ImageField(verbose_name='–§–ª–∞–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (43x32px)', upload_to='media/partners')
    partner_url = models.CharField(max_length=255, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫', blank=True, null=True)
    partner_info = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', blank=True, null=True)

    def __str__(self):
        return self.partner_name

    class Meta:
        verbose_name = "–ü–∞—Ä—Ç–Ω–µ—Ä"
        verbose_name_plural = "üì• –ü–∞—Ä—Ç–Ω–µ—Ä—ã"


